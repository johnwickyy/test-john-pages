from __future__ import unicode_literals from datetime import datetime, timedelta import frappe from ash7anly.utils.constants import DATABASE_DATE_FORMAT from frappe.utils.password import decrypt from ash7anly.utils.helpers import report_log def execute(filters=None): columns = get_columns() data = get_report_data(filters) return columns, data def get_columns(): return [ "{label}:{type}:{width}".format(label="Card Name", type="Data", width=100), "{label}:{type}:{width}".format(label="pin_code", type="Data", width=150), "{label}:{type}:{width}".format(label="Card Name", type="Data", width=100), "{label}:{type}:{width}".format(label="Serial", type="Data", width=150), "{label}:{type}:{width}".format(label="Date - Time", type="Data", width=150), "{label}:{type}:{width}".format(label="Request id", type="Data", width=80), "{label}:{type}:{width}".format(label="Tx_id", type="Data", width=80), "{label}:{type}:{width}".format(label="Status ", type="Data", width=100) ] def get_report_data(filters): supplier_name = filters.get('supplier') result = [] filters['from_date'] = filters.get('from_date', datetime.strptime(str(datetime.now() - timedelta(days=30))[:19], DATABASE_DATE_FORMAT[:17]).date()) filters['to_date'] = filters.get('to_date', datetime.now().date()) filter_str = "From Date :" + filters['from_date'] + "\nTo Date :" + filters['to_date']+ "\nSupplier :" + filters['supplier'] report_log("Inventory Card with decrypt pins", filter_str) orders = frappe.db.sql(""" select serial,(ic.creation) as cer, card_name,charged,card,tx_id,pin_code from `tabInventory Card` ic where DATE(ic.creation) >= '{0}' and DATE(ic.creation) <= '{1}' and ic.supplier='{2}' order by ic.creation desc; """.format( filters['from_date'], filters['to_date'], supplier_name ), as_dict=True) for transaction in orders: if transaction.charged == 1: Status = "charged" else: Status = "UNcharged" if not transaction.tx_id: transaction.tx_id="No" req=transaction.tx_id.split("/") result.append( [ transaction.card, transaction.card_name, transaction.serial, transaction.cer, req[0], req[1] if len(req)>1 else '', Status # transaction.d ] ) return result